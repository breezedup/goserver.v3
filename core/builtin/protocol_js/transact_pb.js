// source: transact.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.protocol.TransactCtrlCmd', null, global);
goog.exportSymbol('proto.protocol.TransactParam', null, global);
goog.exportSymbol('proto.protocol.TransactResult', null, global);
goog.exportSymbol('proto.protocol.TransactStart', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.TransactStart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.TransactStart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.TransactStart.displayName = 'proto.protocol.TransactStart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.TransactCtrlCmd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.TransactCtrlCmd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.TransactCtrlCmd.displayName = 'proto.protocol.TransactCtrlCmd';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.TransactResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.TransactResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.TransactResult.displayName = 'proto.protocol.TransactResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.TransactParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.TransactParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.TransactParam.displayName = 'proto.protocol.TransactParam';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.TransactStart.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.TransactStart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.TransactStart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.TransactStart.toObject = function(includeInstance, msg) {
  var f, obj = {
    mytnp: (f = msg.getMytnp()) && proto.protocol.TransactParam.toObject(includeInstance, f),
    parentnp: (f = msg.getParentnp()) && proto.protocol.TransactParam.toObject(includeInstance, f),
    customdata: msg.getCustomdata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.TransactStart}
 */
proto.protocol.TransactStart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.TransactStart;
  return proto.protocol.TransactStart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.TransactStart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.TransactStart}
 */
proto.protocol.TransactStart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protocol.TransactParam;
      reader.readMessage(value,proto.protocol.TransactParam.deserializeBinaryFromReader);
      msg.setMytnp(value);
      break;
    case 2:
      var value = new proto.protocol.TransactParam;
      reader.readMessage(value,proto.protocol.TransactParam.deserializeBinaryFromReader);
      msg.setParentnp(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCustomdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.TransactStart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.TransactStart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.TransactStart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.TransactStart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMytnp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protocol.TransactParam.serializeBinaryToWriter
    );
  }
  f = message.getParentnp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.protocol.TransactParam.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * required TransactParam MyTNP = 1;
 * @return {!proto.protocol.TransactParam}
 */
proto.protocol.TransactStart.prototype.getMytnp = function() {
  return /** @type{!proto.protocol.TransactParam} */ (
    jspb.Message.getWrapperField(this, proto.protocol.TransactParam, 1, 1));
};


/**
 * @param {!proto.protocol.TransactParam} value
 * @return {!proto.protocol.TransactStart} returns this
*/
proto.protocol.TransactStart.prototype.setMytnp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protocol.TransactStart} returns this
 */
proto.protocol.TransactStart.prototype.clearMytnp = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.TransactStart.prototype.hasMytnp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required TransactParam ParenTNP = 2;
 * @return {!proto.protocol.TransactParam}
 */
proto.protocol.TransactStart.prototype.getParentnp = function() {
  return /** @type{!proto.protocol.TransactParam} */ (
    jspb.Message.getWrapperField(this, proto.protocol.TransactParam, 2, 1));
};


/**
 * @param {!proto.protocol.TransactParam} value
 * @return {!proto.protocol.TransactStart} returns this
*/
proto.protocol.TransactStart.prototype.setParentnp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protocol.TransactStart} returns this
 */
proto.protocol.TransactStart.prototype.clearParentnp = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.TransactStart.prototype.hasParentnp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes CustomData = 3;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.TransactStart.prototype.getCustomdata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes CustomData = 3;
 * This is a type-conversion wrapper around `getCustomdata()`
 * @return {string}
 */
proto.protocol.TransactStart.prototype.getCustomdata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCustomdata()));
};


/**
 * optional bytes CustomData = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCustomdata()`
 * @return {!Uint8Array}
 */
proto.protocol.TransactStart.prototype.getCustomdata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCustomdata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.protocol.TransactStart} returns this
 */
proto.protocol.TransactStart.prototype.setCustomdata = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protocol.TransactStart} returns this
 */
proto.protocol.TransactStart.prototype.clearCustomdata = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.TransactStart.prototype.hasCustomdata = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.TransactCtrlCmd.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.TransactCtrlCmd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.TransactCtrlCmd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.TransactCtrlCmd.toObject = function(includeInstance, msg) {
  var f, obj = {
    tid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    cmd: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.TransactCtrlCmd}
 */
proto.protocol.TransactCtrlCmd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.TransactCtrlCmd;
  return proto.protocol.TransactCtrlCmd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.TransactCtrlCmd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.TransactCtrlCmd}
 */
proto.protocol.TransactCtrlCmd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCmd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.TransactCtrlCmd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.TransactCtrlCmd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.TransactCtrlCmd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.TransactCtrlCmd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int64 TId = 1;
 * @return {number}
 */
proto.protocol.TransactCtrlCmd.prototype.getTid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.protocol.TransactCtrlCmd} returns this
 */
proto.protocol.TransactCtrlCmd.prototype.setTid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protocol.TransactCtrlCmd} returns this
 */
proto.protocol.TransactCtrlCmd.prototype.clearTid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.TransactCtrlCmd.prototype.hasTid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 Cmd = 2;
 * @return {number}
 */
proto.protocol.TransactCtrlCmd.prototype.getCmd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.protocol.TransactCtrlCmd} returns this
 */
proto.protocol.TransactCtrlCmd.prototype.setCmd = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protocol.TransactCtrlCmd} returns this
 */
proto.protocol.TransactCtrlCmd.prototype.clearCmd = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.TransactCtrlCmd.prototype.hasCmd = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.TransactResult.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.TransactResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.TransactResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.TransactResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    mytid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    childtid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    retcode: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    customdata: msg.getCustomdata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.TransactResult}
 */
proto.protocol.TransactResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.TransactResult;
  return proto.protocol.TransactResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.TransactResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.TransactResult}
 */
proto.protocol.TransactResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMytid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChildtid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRetcode(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCustomdata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.TransactResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.TransactResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.TransactResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.TransactResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * required int64 MyTId = 1;
 * @return {number}
 */
proto.protocol.TransactResult.prototype.getMytid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.protocol.TransactResult} returns this
 */
proto.protocol.TransactResult.prototype.setMytid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protocol.TransactResult} returns this
 */
proto.protocol.TransactResult.prototype.clearMytid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.TransactResult.prototype.hasMytid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 ChildTId = 2;
 * @return {number}
 */
proto.protocol.TransactResult.prototype.getChildtid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.protocol.TransactResult} returns this
 */
proto.protocol.TransactResult.prototype.setChildtid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protocol.TransactResult} returns this
 */
proto.protocol.TransactResult.prototype.clearChildtid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.TransactResult.prototype.hasChildtid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 RetCode = 3;
 * @return {number}
 */
proto.protocol.TransactResult.prototype.getRetcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.protocol.TransactResult} returns this
 */
proto.protocol.TransactResult.prototype.setRetcode = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protocol.TransactResult} returns this
 */
proto.protocol.TransactResult.prototype.clearRetcode = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.TransactResult.prototype.hasRetcode = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes CustomData = 4;
 * @return {!(string|Uint8Array)}
 */
proto.protocol.TransactResult.prototype.getCustomdata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes CustomData = 4;
 * This is a type-conversion wrapper around `getCustomdata()`
 * @return {string}
 */
proto.protocol.TransactResult.prototype.getCustomdata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCustomdata()));
};


/**
 * optional bytes CustomData = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCustomdata()`
 * @return {!Uint8Array}
 */
proto.protocol.TransactResult.prototype.getCustomdata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCustomdata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.protocol.TransactResult} returns this
 */
proto.protocol.TransactResult.prototype.setCustomdata = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protocol.TransactResult} returns this
 */
proto.protocol.TransactResult.prototype.clearCustomdata = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.TransactResult.prototype.hasCustomdata = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.TransactParam.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.TransactParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.TransactParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.TransactParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    transnodeid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    transtype: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    ownertype: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    ownerid: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    skeletonid: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    levelno: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    areaid: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    timeout: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    transcommittype: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.TransactParam}
 */
proto.protocol.TransactParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.TransactParam;
  return proto.protocol.TransactParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.TransactParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.TransactParam}
 */
proto.protocol.TransactParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTransnodeid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTranstype(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwnertype(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOwnerid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSkeletonid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevelno(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAreaid(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeout(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTranscommittype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.TransactParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.TransactParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.TransactParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.TransactParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
};


/**
 * required int64 TransNodeID = 1;
 * @return {number}
 */
proto.protocol.TransactParam.prototype.getTransnodeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.protocol.TransactParam} returns this
 */
proto.protocol.TransactParam.prototype.setTransnodeid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protocol.TransactParam} returns this
 */
proto.protocol.TransactParam.prototype.clearTransnodeid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.TransactParam.prototype.hasTransnodeid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 TransType = 2;
 * @return {number}
 */
proto.protocol.TransactParam.prototype.getTranstype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.protocol.TransactParam} returns this
 */
proto.protocol.TransactParam.prototype.setTranstype = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protocol.TransactParam} returns this
 */
proto.protocol.TransactParam.prototype.clearTranstype = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.TransactParam.prototype.hasTranstype = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 OwnerType = 3;
 * @return {number}
 */
proto.protocol.TransactParam.prototype.getOwnertype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.protocol.TransactParam} returns this
 */
proto.protocol.TransactParam.prototype.setOwnertype = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protocol.TransactParam} returns this
 */
proto.protocol.TransactParam.prototype.clearOwnertype = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.TransactParam.prototype.hasOwnertype = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 OwnerID = 4;
 * @return {number}
 */
proto.protocol.TransactParam.prototype.getOwnerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.protocol.TransactParam} returns this
 */
proto.protocol.TransactParam.prototype.setOwnerid = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protocol.TransactParam} returns this
 */
proto.protocol.TransactParam.prototype.clearOwnerid = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.TransactParam.prototype.hasOwnerid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 SkeletonID = 5;
 * @return {number}
 */
proto.protocol.TransactParam.prototype.getSkeletonid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.protocol.TransactParam} returns this
 */
proto.protocol.TransactParam.prototype.setSkeletonid = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protocol.TransactParam} returns this
 */
proto.protocol.TransactParam.prototype.clearSkeletonid = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.TransactParam.prototype.hasSkeletonid = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int32 LevelNo = 6;
 * @return {number}
 */
proto.protocol.TransactParam.prototype.getLevelno = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.protocol.TransactParam} returns this
 */
proto.protocol.TransactParam.prototype.setLevelno = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protocol.TransactParam} returns this
 */
proto.protocol.TransactParam.prototype.clearLevelno = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.TransactParam.prototype.hasLevelno = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required int32 AreaID = 7;
 * @return {number}
 */
proto.protocol.TransactParam.prototype.getAreaid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.protocol.TransactParam} returns this
 */
proto.protocol.TransactParam.prototype.setAreaid = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protocol.TransactParam} returns this
 */
proto.protocol.TransactParam.prototype.clearAreaid = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.TransactParam.prototype.hasAreaid = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required int64 TimeOut = 8;
 * @return {number}
 */
proto.protocol.TransactParam.prototype.getTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.protocol.TransactParam} returns this
 */
proto.protocol.TransactParam.prototype.setTimeout = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protocol.TransactParam} returns this
 */
proto.protocol.TransactParam.prototype.clearTimeout = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.TransactParam.prototype.hasTimeout = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * required int32 TransCommitType = 9;
 * @return {number}
 */
proto.protocol.TransactParam.prototype.getTranscommittype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.protocol.TransactParam} returns this
 */
proto.protocol.TransactParam.prototype.setTranscommittype = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protocol.TransactParam} returns this
 */
proto.protocol.TransactParam.prototype.clearTranscommittype = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.TransactParam.prototype.hasTranscommittype = function() {
  return jspb.Message.getField(this, 9) != null;
};


goog.object.extend(exports, proto.protocol);
